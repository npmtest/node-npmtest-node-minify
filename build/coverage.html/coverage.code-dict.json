{"/home/travis/build/npmtest/node-npmtest-node-minify/test.js":"/* istanbul instrument in package npmtest_node_minify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-minify/lib.npmtest_node_minify.js":"/* istanbul instrument in package npmtest_node_minify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_minify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_minify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-minify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-minify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_minify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_minify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_minify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_minify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_minify.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_minify.__dirname + '/lib.npmtest_node_minify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-minify/node_modules/node-minify/index.js":"/*!\n * node-minify\n * Copyright(c) 2011-2017 Rodolphe Stoclin\n * MIT Licensed\n */\n\n'use strict';\n\nmodule.exports = require('./lib/node-minify');\n","/home/travis/build/npmtest/node-npmtest-node-minify/node_modules/node-minify/lib/node-minify.js":"/*!\n * node-minify\n * Copyright(c) 2011-2017 Rodolphe Stoclin\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar deprecated = require('./deprecated');\nvar setup = require('./setup');\nvar compress = require('./compress');\n\n/**\n * Expose `minify()`.\n */\n\nvar app = module.exports = {};\n\n/**\n * Run node-minify.\n *\n * @param {Object} settings - Settings from user input\n */\n\napp.minify = function minify(settings) {\n  deprecated(this.constructor.name, settings);\n  settings = setup(settings);\n  return compress(settings).nodeify(settings.callback);\n};\n","/home/travis/build/npmtest/node-npmtest-node-minify/node_modules/node-minify/lib/deprecated.js":"/*!\n * node-minify\n * Copyright(c) 2011-2017 Rodolphe Stoclin\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar deprecate = require('depd')('node-minify');\n\n/**\n * Expose `deprecated()`.\n */\n\nmodule.exports = deprecated;\n\n/**\n * Deprecate some old syntax.\n *\n * @param {String} constructorName\n * @param {Object} settings\n */\n\nfunction deprecated(constructorName, settings) {\n  if (constructorName === 'minify') {\n    deprecate('Instantiate is no longer necessary.\\n' +\n      'new compressor.minify() is deprecated.\\n' +\n      'Please use:\\n' +\n      '\\n' +\n      '  var compressor = require(\"node-minify\");\\n' +\n      '  compressor.minify();\\n' +\n      '\\n'\n    );\n  }\n\n  if (settings.type) {\n    deprecate('type was renamed to compressor');\n  }\n\n  if (settings.fileIn) {\n    deprecate('fileIn was renamed to input');\n  }\n\n  if (settings.fileOut) {\n    deprecate('fileOut was renamed to output');\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-node-minify/node_modules/node-minify/lib/setup.js":"/*!\n * node-minify\n * Copyright(c) 2011-2017 Rodolphe Stoclin\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar path = require('path');\nvar glob = require('glob');\nvar extend = require('xtend');\nvar utils = require('./utils');\n\n/**\n * Default settings.\n */\n\nvar defaultSettings = {\n  sync: false,\n  options: {},\n  buffer: 1000 * 1024,\n  callback: false\n};\n\n/**\n * Expose `setup()`.\n */\n\nmodule.exports = setup;\n\n/**\n * Run setup.\n *\n * @param {Object} inputSettings\n * @return {Object}\n */\n\nfunction setup(inputSettings) {\n  checkMandatories(inputSettings);\n\n  var settings = extend(utils.clone(defaultSettings), inputSettings);\n  settings = extend(settings, wildcards(settings.input, settings.publicFolder));\n  settings = extend(settings, setPublicFolder(settings.input, settings.publicFolder));\n\n  return settings;\n}\n\n/**\n * Handle wildcards in a path, get the real path of each files.\n *\n * @param {String|Array} input - Path with wildcards\n * @param {String} publicFolder - Path to the public folder\n * @return {Object}\n */\n\nfunction wildcards(input, publicFolder) {\n  // If it's a string\n  if (!Array.isArray(input)) {\n    return wildcardsString(input, publicFolder);\n  }\n\n  return wildcardsArray(input, publicFolder);\n}\n\n/**\n * Handle wildcards in a path (string only), get the real path of each files.\n *\n * @param {String} input - Path with wildcards\n * @param {String} publicFolder - Path to the public folder\n * @return {Object}\n */\n\nfunction wildcardsString(input, publicFolder) {\n  var output = {};\n\n  if (input.indexOf('*') > -1) {\n    output.input = getFilesFromWildcards(input, publicFolder);\n  }\n\n  return output;\n}\n\n/**\n * Handle wildcards in a path (array only), get the real path of each files.\n *\n * @param {Array} input - Path with wildcards\n * @param {String} publicFolder - Path to the public folder\n * @return {Object}\n */\n\nfunction wildcardsArray(input, publicFolder) {\n  var output = {};\n\n  output.input = input;\n\n  // Transform all wildcards to path file\n  input.forEach(function(item) {\n    output.input = output.input.concat(getFilesFromWildcards(item, publicFolder));\n  });\n\n  // Remove all wildcards from array\n  for (var i = 0; i < output.input.length; i++) {\n    if (output.input[i].indexOf('*') > -1) {\n      output.input.splice(i, 1);\n\n      i--;\n    }\n  }\n\n  return output;\n}\n\n/**\n * Get the real path of each files.\n *\n * @param {String} input - Path with wildcards\n * @param {String} publicFolder - Path to the public folder\n * @return {Object}\n */\n\nfunction getFilesFromWildcards(input, publicFolder) {\n  var output = [];\n\n  if (input.indexOf('*') > -1) {\n    output = glob.sync((publicFolder || '') + input, null);\n  }\n\n  return output;\n}\n\n/**\n * Prepend the public folder to each file.\n *\n * @param {String|Array} input - Path to file(s)\n * @param {String} publicFolder - Path to the public folder\n * @return {Object}\n */\n\nfunction setPublicFolder(input, publicFolder) {\n  var output = {};\n\n  if (typeof publicFolder !== 'string') {\n    return output;\n  }\n\n  publicFolder = path.normalize(publicFolder);\n\n  if (Array.isArray(input)) {\n    output.input = input.map(function(item) {\n      // Check if publicFolder is already in path\n      if (path.normalize(item).indexOf(publicFolder) > -1) {\n        return item;\n      }\n      return path.normalize(publicFolder + item);\n    });\n    return output;\n  }\n\n  input = path.normalize(input);\n\n  // Check if publicFolder is already in path\n  if (input.indexOf(publicFolder) > -1) {\n    output.input = input;\n    return output;\n  }\n\n  output.input = path.normalize(publicFolder + input);\n\n  return output;\n}\n\n/**\n * Check if some settings are here.\n *\n * @param {Object} settings\n */\n\nfunction checkMandatories(settings) {\n  [\n    'compressor',\n    'input',\n    'output'\n  ].forEach(function(item) {\n    mandatory(item, settings);\n  });\n}\n\n/**\n * Check if the setting exist.\n *\n * @param {String} setting\n * @param {Object} settings\n */\n\nfunction mandatory(setting, settings) {\n  if (!settings[setting]) {\n    throw new Error(setting + ' is mandatory.');\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-node-minify/node_modules/node-minify/lib/utils.js":"/*!\n * node-minify\n * Copyright(c) 2011-2017 Rodolphe Stoclin\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar fs = require('fs');\nvar nodeVersion = require('node-version');\n\n/**\n * Expose `utils`.\n */\n\nvar utils = module.exports = {};\n\n/**\n * Read content from file.\n *\n * @param {String} file\n * @returns {String}\n */\n\nutils.readFile = function readFile(file) {\n  return fs.readFileSync(file, 'utf8');\n};\n\n/**\n * Write content into file.\n *\n * @param {String} file\n * @param {String} content\n * @returns {String}\n */\n\nutils.writeFile = function writeFile(file, content) {\n  fs.writeFileSync(file, content, 'utf8');\n  return content;\n};\n\n/**\n * Builds arguments array based on an object.\n *\n * @param {Object} options\n * @returns {Array}\n */\n\nutils.buildArgs = function buildArgs(options) {\n  var args = [];\n\n  Object.keys(options).forEach(function(key) {\n    if (options[key] && options[key] !== false) {\n      args.push('--' + key);\n    }\n\n    if (options[key] && options[key] !== true) {\n      args.push(options[key]);\n    }\n  });\n\n  return args;\n};\n\n/**\n * Clone an object.\n *\n * @param {Object} obj\n * @returns {Object}\n */\n\nutils.clone = function clone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n};\n\n/**\n * Check in node is higher or equal to 4.\n *\n * @returns {Boolean}\n */\n\nutils.isNodeV4AndHigher = function isNodeV4AndHigher() {\n  return parseInt(nodeVersion.major, 10) >= 4;\n};\n","/home/travis/build/npmtest/node-npmtest-node-minify/node_modules/node-minify/lib/compress.js":"/*!\n * node-minify\n * Copyright(c) 2011-2017 Rodolphe Stoclin\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar fs = require('fs');\nvar mkdirp = require('mkdirp');\nvar utils = require('../lib/utils');\nvar babili = require('./compressors/babili');\nvar cleanCSS = require('./compressors/clean-css');\nvar csso = require('./compressors/csso');\nvar gcc;\nvar gccJava = require('./compressors/gcc-java');\nvar noCompress = require('./compressors/no-compress');\nvar sqwish = require('./compressors/sqwish');\nvar uglifyjs = require('./compressors/uglifyjs');\nvar yui = require('./compressors/yui');\n\nif ((process.execArgv && process.execArgv.indexOf('--use_strict') > -1) || !utils.isNodeV4AndHigher()) {\n  gcc = require('./compressors/gcc-java');\n} else {\n  gcc = require('./compressors/gcc');\n}\n\n/**\n * Mapping input compressors to functions\n * to be executed\n */\n\nvar compressorsMap = {\n  'babili': babili,\n  'yui': function(settings, data) {\n    return yui('css', settings, data);\n  },\n  'yui-css': function(settings, data) {\n    return yui('css', settings, data);\n  },\n  'yui-js': function(settings, data) {\n    return yui('js', settings, data);\n  },\n  'gcc': gcc,\n  'gcc-java': function(settings, data) {\n    return gccJava(settings, data, false);\n  },\n  'gcc-legacy': function(settings, data) {\n    return gccJava(settings, data, true);\n  },\n  'uglifyjs': uglifyjs,\n  'sqwish': sqwish,\n  'clean-css': cleanCSS,\n  'csso': csso,\n  'no-compress': noCompress\n};\n\n/**\n * Expose `compress()`.\n */\n\nmodule.exports = compress;\n\n/**\n * Run compressor.\n *\n * @param {Object} settings\n */\n\nfunction compress(settings) {\n  if (typeof compressorsMap[settings.compressor] !== 'function') {\n    throw new Error('Type \"' + settings.compressor + '\" does not exist');\n  }\n\n  createDirectory(settings.output);\n  var content = getContentFromFiles(settings.input);\n  return compressorsMap[settings.compressor](settings, content);\n}\n\n/**\n * Concatenate all input files and get the data.\n *\n * @param {String|Array} input\n * @return {Object}\n */\n\nfunction getContentFromFiles(input) {\n  if (!Array.isArray(input)) {\n    return fs.readFileSync(input, 'utf8');\n  }\n\n  return input.map(function(path) {\n    return fs.readFileSync(path, 'utf8');\n  }).join('\\n');\n}\n\n/**\n * Create folder of the target file.\n *\n * @param {String} file - Full path of the file\n */\n\nfunction createDirectory(file) {\n  mkdirp.sync(file.substr(0, file.lastIndexOf('/')));\n}\n","/home/travis/build/npmtest/node-npmtest-node-minify/node_modules/node-minify/lib/compressors/babili.js":"/*!\n * node-minify\n * Copyright(c) 2011-2017 Rodolphe Stoclin\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Promise = require('bluebird');\nvar babel = require('babel-core');\nvar babelPresetBabili = require('babel-preset-babili');\nvar utils = require('../utils');\n\n/**\n * Expose `compressBabili()`.\n */\n\nmodule.exports = compressBabili;\n\n/**\n * Run babili.\n *\n * @param {Object} settings\n * @param {String} content\n */\n\nfunction compressBabili(settings, content) {\n  return new Promise(function(resolve) {\n    var babelOptions = {\n      presets: []\n    };\n\n    if (settings.options.babelrc) {\n      babelOptions = JSON.parse(utils.readFile(settings.options.babelrc));\n    }\n\n    if (settings.options.presets) {\n      var babelrcPresets = babelOptions.presets || [];\n      babelOptions.presets = babelrcPresets.concat(settings.options.presets);\n    }\n\n    if (babelOptions.presets.indexOf('babili') === -1) {\n      babelOptions.presets = babelOptions.presets.concat([babelPresetBabili]);\n    }\n\n    var contentMinified = babel.transform(content, babelOptions);\n    utils.writeFile(settings.output, contentMinified.code);\n    resolve(contentMinified.code);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-node-minify/node_modules/node-minify/lib/compressors/clean-css.js":"/*!\n * node-minify\n * Copyright(c) 2011-2017 Rodolphe Stoclin\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Promise = require('bluebird');\nvar CleanCSS = require('clean-css');\nvar utils = require('../utils');\n\n/**\n * Expose `compressCleanCSS()`.\n */\n\nmodule.exports = compressCleanCSS;\n\n/**\n * Run clean-css.\n *\n * @param {Object} settings\n * @param {String} content\n */\n\nfunction compressCleanCSS(settings, content) {\n  return new Promise(function(resolve) {\n    var contentMinified = new CleanCSS(settings.options).minify(content).styles;\n    utils.writeFile(settings.output, contentMinified);\n    resolve(contentMinified);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-node-minify/node_modules/node-minify/lib/compressors/csso.js":"/*!\n * node-minify\n * Copyright(c) 2011-2017 Rodolphe Stoclin\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Promise = require('bluebird');\nvar csso = require('csso');\nvar utils = require('../utils');\n\n/**\n * Expose `compressCSSO()`.\n */\n\nmodule.exports = compressCSSO;\n\n/**\n * Run csso.\n *\n * @param {Object} settings\n * @param {String} content\n */\n\nfunction compressCSSO(settings, content) {\n  return new Promise(function(resolve) {\n    var contentMinified = csso.minify(content, settings.options.restructureOff);\n    utils.writeFile(settings.output, contentMinified.css);\n    resolve(contentMinified.css);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-node-minify/node_modules/node-minify/lib/compressors/gcc-java.js":"/*!\n * node-minify\n * Copyright(c) 2011-2017 Rodolphe Stoclin\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar path = require('path');\nvar utils = require('../utils');\nvar execCompressor = require('../runner');\n\n/**\n * Module variables.\n */\nvar binGcc = path.normalize(__dirname + '/../binaries/google_closure_compiler-v20151216.jar');\nvar binGccLegacy = path.normalize(__dirname + '/../binaries/google_closure_compiler-v20131014-legacy-java-1.6.jar');\n\n/**\n * Expose `compressGCC()`.\n */\n\nmodule.exports = compressGCC;\n\n/**\n * Run Google Closure Compiler.\n *\n * @param {Object} settings\n * @param {String} content\n * @param {Boolean} legacy\n */\n\nfunction compressGCC(settings, content, legacy) {\n  return execCompressor(gccCommand(settings.options, legacy), content, settings)\n    .then(function(contentMinified) {\n      return utils.writeFile(settings.output, contentMinified);\n    })\n    .catch(handleErrors);\n}\n\nfunction handleErrors(err) {\n  if (err.message.indexOf('UnsupportedClassVersionError') > -1) {\n    throw new Error('Latest Google Closure Compiler requires Java >= 1.7, please update Java or use gcc-legacy');\n  }\n  throw err;\n}\n\n/**\n * Google Closure Compiler command line.\n */\n\nfunction gccCommand(options, legacy) {\n  return [\n    '-server',\n    '-XX:+TieredCompilation',\n    '-jar',\n    '-Xss2048k',\n    (legacy) ? binGccLegacy : binGcc,\n    '--warning_level',\n    'QUIET'\n  ].concat(utils.buildArgs(options));\n}\n","/home/travis/build/npmtest/node-npmtest-node-minify/node_modules/node-minify/lib/runner.js":"/*!\n * node-minify\n * Copyright(c) 2011-2017 Rodolphe Stoclin\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar childProcess = require('child_process');\nvar Promise = require('bluebird');\n\n/**\n * Expose `runCommandLine()`.\n */\n\nmodule.exports = runCommandLine;\n\n/**\n * Run the command line with spawn.\n *\n * @param {String} args\n * @param {String} data\n * @param {Object} settings\n */\n\nfunction runCommandLine(args, data, settings) {\n  if (settings.sync) {\n    return runSync(settings, data, args);\n  }\n\n  return runAsync(data, args);\n}\n\n/**\n * Exec command as async.\n *\n * @param {String} content\n * @param {Array} args\n */\n\nfunction runAsync(content, args) {\n  return new Promise(function(resolve, reject) {\n    var stdout = '';\n    var stderr = '';\n\n    var child = childProcess.spawn('java', args, {\n      stdio: 'pipe'\n    });\n\n    child.on('error', console.log.bind(console, 'child'));\n    child.stdin.on('error', console.log.bind(console, 'child.stdin'));\n    child.stdout.on('error', console.log.bind(console, 'child.stdout'));\n    child.stderr.on('error', console.log.bind(console, 'child.stderr'));\n\n    child.on('exit', function(code) {\n      if (code !== 0) {\n        return reject(new Error(stderr));\n      }\n\n      resolve(stdout);\n    });\n\n    child.stdout.on('data', function(chunk) {\n      stdout += chunk;\n    });\n    child.stderr.on('data', function(chunk) {\n      stderr += chunk;\n    });\n\n    child.stdin.end(content);\n  });\n}\n\n/**\n * Exec command as sync.\n *\n * @param {Object} settings\n * @param {String} content\n * @param {String} args\n */\n\nfunction runSync(settings, content, args) {\n  return new Promise(function(resolve, reject) {\n    try {\n      var child = childProcess.spawnSync('java', args, {\n        input: content,\n        stdio: 'pipe',\n        maxBuffer: settings.buffer\n      });\n      var stdout = child.stdout.toString();\n      var stderr = child.stderr.toString();\n      var code = child.status;\n\n      if (code !== 0) {\n        return reject(new Error(stderr));\n      }\n\n      resolve(stdout);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-node-minify/node_modules/node-minify/lib/compressors/no-compress.js":"/*!\n * node-minify\n * Copyright(c) 2011-2017 Rodolphe Stoclin\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Promise = require('bluebird');\nvar utils = require('../utils');\n\n/**\n * Expose `noCompress()`.\n */\n\nmodule.exports = noCompress;\n\n/**\n * Just merge, no compression.\n *\n * @param {Object} settings\n * @param {String} content\n */\n\nfunction noCompress(settings, content) {\n  return new Promise(function(resolve) {\n    utils.writeFile(settings.output, content);\n    resolve(content);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-node-minify/node_modules/node-minify/lib/compressors/sqwish.js":"/*!\n * node-minify\n * Copyright(c) 2011-2017 Rodolphe Stoclin\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Promise = require('bluebird');\nvar sqwish = require('sqwish');\nvar utils = require('../utils');\n\n/**\n * Expose `compressSqwish()`.\n */\n\nmodule.exports = compressSqwish;\n\n/**\n * Run sqwish.\n *\n * @param {Object} settings\n * @param {String} content\n */\n\nfunction compressSqwish(settings, content) {\n  return new Promise(function(resolve) {\n    var contentMinified = sqwish.minify(content, settings.options.strict);\n    utils.writeFile(settings.output, contentMinified);\n    resolve(contentMinified);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-node-minify/node_modules/node-minify/lib/compressors/uglifyjs.js":"/*!\n * node-minify\n * Copyright(c) 2011-2017 Rodolphe Stoclin\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Promise = require('bluebird');\nvar uglifyJS = require('uglify-js');\nvar utils = require('../utils');\n\n/**\n * Expose `compressUglifyJS()`.\n */\n\nmodule.exports = compressUglifyJS;\n\n/**\n * Run uglifyJS.\n *\n * @param {Object} settings\n * @param {String} content\n */\n\nfunction compressUglifyJS(settings, content) {\n  return new Promise(function(resolve) {\n    var options = settings.options;\n    options.fromString = true;\n    var contentMinified = uglifyJS.minify(content, options);\n    utils.writeFile(settings.output, contentMinified.code);\n    if (contentMinified.map && options.outSourceMap) {\n      utils.writeFile(options.outSourceMap, contentMinified.map);\n    }\n    resolve(contentMinified.code);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-node-minify/node_modules/node-minify/lib/compressors/yui.js":"/*!\n * node-minify\n * Copyright(c) 2011-2017 Rodolphe Stoclin\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar path = require('path');\nvar utils = require('../utils');\nvar execCompressor = require('../runner');\n\n/**\n * Module variables.\n */\nvar binYui = path.normalize(__dirname + '/../binaries/yuicompressor-2.4.7.jar');\n\n/**\n * Expose `compressYUI()`.\n */\n\nmodule.exports = compressYUI;\n\n/**\n * Run YUI Compressor.\n *\n * @param {String} type\n * @param {Object} settings\n * @param {String} content\n */\n\nfunction compressYUI(type, settings, content) {\n  return execCompressor(yuiCommand(type, settings.options), content, settings)\n    .then(function(contentMinified) {\n      return utils.writeFile(settings.output, contentMinified);\n    });\n}\n\n/**\n * YUI Compressor CSS command line.\n */\n\nfunction yuiCommand(type, options) {\n  return [\n    '-jar',\n    '-Xss2048k',\n    binYui,\n    '--type',\n    type\n  ].concat(utils.buildArgs(options));\n}\n","/home/travis/build/npmtest/node-npmtest-node-minify/node_modules/node-minify/lib/compressors/gcc.js":"/*!\n * node-minify\n * Copyright(c) 2011-2017 Rodolphe Stoclin\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Promise = require('bluebird');\nvar gcc = require('google-closure-compiler-js');\nvar utils = require('../utils');\n\n/**\n * Expose `compressGCCJS()`.\n */\n\nmodule.exports = compressGCCJS;\n\n/**\n * Run Google Closure Compiler.\n *\n * @param {Object} settings\n * @param {String} content\n */\n\nfunction compressGCCJS(settings, content) {\n  return new Promise(function(resolve) {\n    var contentMinified = gcc.compile({jsCode: [{src: content}]}); // TODO add settings\n    utils.writeFile(settings.output, contentMinified.compiledCode);\n    resolve(contentMinified.compiledCode);\n  });\n}\n"}